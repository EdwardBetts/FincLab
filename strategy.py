"""
Class : Strategy
----------------

Author : Peter Lee
Date created : 2016-Jan-14

The Strategy Abstract Base Class (ABC)
--------------------------------------
Defines a pure virtual .calculate_signals method. In derived classes, this is used to handle the generation of SignalEvent objects based on market data updates.
"""


from abc import ABCMeta, abstractmethod


class Strategy(object):
    """
    Strategy is an ABC providing an interface for all inherited strategy handling objects.

    The goal of a (derived) strategy object is to generate Signal objects for particular symbols based on the inputs of Bars (OHLCV) generated by a DataHandler object.

    This is designed to work both with historic and live data as the Strategy object is agnostic to where the data came from, since it obtains the bar tupules from a queue object.

    Parameters
    ----------
    bars : DataHandler or an inherited class
        The feeder of market data.
    event_queue : queue.Queue()
        The event queue object. Default to FIFO queue.
    """

    __metaclass__ = ABCMeta

    @abstractmethod
    def calculate_signals(self):
        """
        Provides the mechanisms to calculate the list of signals.
        """
        raise NotImplementedError("Should implement calculate_signals()")
