"""
Strategy Class

Peter Lee
Last update 2016-Jan-14

# The Strategy Abstract Base Class (ABC)
It simply defines a pure virtual *calculate_signals* method. In derived classes, this is used to handle the generation of *SignalEvent* objects based on market data updates.

# Note
The strategy hierachy is relatively simple as it consists of an abstract base class with a single pure virtual method for generating *SignalEvent* objects. In order to create the *Strategy*, it is necessary to import the *queue* object, abstract base class tools and the *SignalEvent*.

"""


import numpy as np
import pandas as pd
from abc import ABCMeta, abstractmethod
import datetime as dt
try:
    import Queue as queue  # For Python 2 compatibility
except ImportError:
    import queue

from event import SignalEvent


class Strategy(object):
    """
    Strategy is an ABC providing an interface for all inherited strategy handling objects.

    The goal of a (derived) strategy object is to generate Signal objects for particular symbols based on the inputs of Bars (OHLCV) generated by a DataHandler object.

    This is designed to work both with historic and live data as the Strategy object is agnostic to where the data came from, since it obtains the bar tupules from a queue object.
    """

    __metaclass__ = ABCMeta

    @abstractmethod
    def calculate_signals(self):
        """
        Provides the mechanisms to calculate the list of signals.
        """
        raise NotImplementedError("Should implement calculate_signals()")
