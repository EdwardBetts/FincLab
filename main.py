"""
    Project : FincLab

    Author : Peter Lee

Three components of the system are dynamic - it means that you could replace these components in the 'config.ini" file with other classes to override the default:

    strategy : class, default to "MovingAverageCrossover"
        Strategy transforms the data feeds into investment signals, which will be received by the Portfolio class to determine the appropriate order size. Different strategies are available in the strategy folder.

    data_handler : class, default to "HistoricDataHandler"
        DataHandler transforms time series data (or live streams) into periodic "bars" to feed the event-driven system. The "HistoricDataHandler" is suitable for backtesting.

    execution_handler: class, default to "SimulatedExecutionHandler"
        Execution_hanlder executes the orders generated by the Portfolio class. The default "SimulatedExecutionHandler" assumes Interactive Brokers' brokerage fee and ignores market microstructure issues such as slippage, fill ratios etc.
"""

from portfolio import Portfolio
import engine
from config import config
from logger import create_logger
import multiprocessing as mp
import time
from dateutil import parser
from cli import CommandLineInterface

# Dynamically import the remaining system components
exec("from data.{module} import {module} as DataHandler".format(module=config["components"]["data_handler"]))
exec("from execution.{module} import {module} as ExecutionHandler".format(module=config["components"]["execution_handler"]))
exec("from strategy.{module} import {module} as Strategy".format(module=config["components"]["strategy"]))

# Initialise environment vars
event_queue = mp.Queue()
log_queue = mp.Queue()
logger = create_logger(log_queue)
jobs = []


def welcome_msgs(log_queue):
    """
    Print initial welcome messages to the UI
    """
    logger.info(r'''
FINCLAB Ver 0.1
      _____                  _   _        ____     _          _         ____
     |" ___|      ___       | \ |"|    U /"___|   |"|     U  /"\  u  U | __")u
    U| |_  u     |_"_|     <|  \| |>   \| | u   U | | u    \/ _ \/    \|  _ \/
    \|  _|/       | |      U| |\  |u    | |/__   \| |/__   / ___ \     | |_) |
     |_|        U/| |\u     |_| \_|      \____|   |_____| /_/   \_\    |____/
     )(\\,-  .-,_|___|_,-.  ||   \\,-.  _// \\    //  \\   \\    >>   _|| \\_
    (__)(_/   \_)-' '-(_/   (_")  (_/  (__)(__)  (_")("_) (__)  (__) (__) (__)
　
        Live-Trading / Back-testing Engine
        by Peter Lee (mr.peter.lee@hotmail.com) NOT Copyrighted (2016)
　
Job Market Demo
---------------
    This app applies the Moving Average Cross-Over Strategy (100- and 300-day windows) to S&P 500 companies (a total of 505 stocks as of Jan 2016) and displays trading signals (long/short/exit).
　
    It assumes an equal-weighted portfolio to execute trading signals and tracks the portfolio performance using 10-year end-of-day historical data. Brokerage fees (Interactive Brokers) are accounted for in the transaction costs.
　
    If data does not exist, the app will first fetch the list of S&P 500 constituents from Wikipedia [1] and then download their adjusted stock prices from Yahoo! Finance.
    [1]: https://en.wikipedia.org/wiki/List_of_S%26P_500_companies
　
Current Settings
----------------
    Stock symbols: {symbols},  Initial capital (USD): ${initial_capital:>10}
    Date range: from {start_date:>11} to {today}
    Log level: {level},  Log file enabled ({log_filename}): {save_to_file}
　
    System Components:
        - Strategy: {strategy}
        - Data Handler: {data_handler}
        - Execution Handler: {execution_handler}
        '''.format(
        **config['general'], **config['components'], **config['log'], today=time.strftime('%Y-%b-%d')
    ))

def start_engine(symbol_list, data_handler, execution_handler, portfolio, strategy, event_queue, heartbeat, initial_capital, start_date):
    """ Starts FincLab core """
    system = engine.Engine(
        symbol_list=symbol_list,
        data_handler=DataHandler,
        execution_handler=ExecutionHandler,
        portfolio=Portfolio,
        strategy=Strategy,
        event_queue=event_queue,
        heartbeat=heartbeat,
        initial_capital=initial_capital,
        start_date=start_date
    )
    system.run()

def start_ui(log_queue, config):
    """ Start the user interface """
    ui = CommandLineInterface(log_queue, config=config)
    ui.run()

def main():
    # Program parameters
    initial_capital = float(config['general']['initial_capital'])
    heartbeat = float(config['general']['heartbeat'])
    start_date = parser.parse(config['general']['start_date'])
    symbol_list = config['general']['symbols'].split(' ')

    # Starts the user interface
    ui_process = mp.Process(target=start_ui, args=(log_queue, config))
    ui_process.start()
    jobs.append(ui_process)

    # Print welcome messages
    welcome_msgs(log_queue)

    # Starts the engine in a different process
    time.sleep(10)
    engine_process = mp.Process(target=start_engine,
                                args=(symbol_list, DataHandler, ExecutionHandler, Portfolio, Strategy, event_queue, heartbeat, initial_capital, start_date))
    engine_process.daemon = True
    engine_process.start()  # Launch engine as a separate Python program
    jobs.append(engine_process)

    start_time_ = time.time()

    # Wait for all processes to finish
    for j in jobs:
        j.join()

    logger.info("Engine completed suecessfully and elapsed for {} seconds.".format(time.time() - start_time_))

if __name__ == "__main__":
    # formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    main()
