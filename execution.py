"""
Class : Execution Handler
-------------------------

The ExecutionHandler is an abstract base class (ABC).

Assumptions
-----------
Assume all orders are filled at the current market price for all quantities.
A big part of improving backtest realism will come from designing more sophisticated models of slippage and market impact.

Notes
-----
The execution of trade orders simulates the order handling mechanism and ultimately tie into a brokerage or other means of market connectivity.
"""


import datetime as dt
from abc import ABCMeta, abstractmethod
from event import FillEvent


class ExecutionHandler(object):
    """
    The ExecutionHandler abstract base class (ABC) handles the interaction between a set of order objects generated by a Portfolio and the ultimate set of Fill objects that actually occur in the market.

    The handlers can be used to subclass simulated brokerages or live brokerages, with identical interfaces. As such, it allows strategies to be backtested in a very similar manner to the live trading engine.

    Parameters
    ----------
    event_queue : queue.Queue()
        The event queue
    """

    __metaclass__ = ABCMeta

    @abstractmethod
    def execute_order(self, event):
        """
        Takes an Order event and executes it, producing a Fill event that gets placed onto the Events queue.

        Parameters:
            event - Contains an Event object with order information.
        """
        raise NotImplementedError("Should implement execute_order()")


class SimulatedExecutionHandler(ExecutionHandler):
    """
    The simulated execution handler simply converts all order objects into their equivalent fill objects automatically without latency, slippage or fill-ratio issues.

    This allows a straightforward "first go" test of any strategy, before implementation with a more sophisticated execution handler.

    Parameters
    ----------
    event_queue : queue.Queue()
        The event queue.
    """

    def __init__(self, event_queue):
        """
        Initiates the handler, setting the event queues up internally.

        Parameters:
            event_queue - the queue of Event objects
        """
        self.event_queue = event_queue

    def execute_order(self, event):
        """
        Simply converts Order objects into Fill objects naitvely, i.e., without any latency, slippage or fill ratio problems.

        Parameters:
            event - Contains an Event object with order information.
        """
        if event.type == 'ORDER':
            fill_event = FillEvent(
                timeindex=dt.datetime.utcnow(),
                symbol=event.symbol,
                exchange='N/A',
                quantity=event.quantity,
                direction=event.direction,
                fill_cost=None,
                commission=None
            )
            self.event_queue.put(fill_event)

